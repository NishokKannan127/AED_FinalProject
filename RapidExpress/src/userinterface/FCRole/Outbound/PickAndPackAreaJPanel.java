/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FCRole.Outbound;

import Business.EcoSystem;
import Business.EnterpriseDelivery.Delivery;
import Business.EnterpriseFulfillmentCenter.FulfillmentCenter;
import Business.EnterpriseFulfillmentCenter.Organization.OutboundOrganization;
import Business.Organizations.FirstMileDeliveryOrganizationDirectory;
import Business.Organizations.InboundOrganizationDirectory;
import Business.POJO.Order;
import Business.POJO.Product;
import Business.POJO.Shipment;
import Business.POJO.VendorShipment;
import Business.Role.DeliveryMen;
import Business.Role.Dock;
import Business.Role.FirstMileDelivery;
import Business.Role.PickAndPack;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nisho
 */
public class PickAndPackAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PickAndPackAreaJPanel
     */
    
    //nishok picker and packer. need to make changes from hardcode to logic
    PickAndPack pickAndPackMan;
    FulfillmentCenter fc;
    Delivery delivery;
    ArrayList<Order>orderList;
    Dock dock;
    private ArrayList<Product>arrivedProducts;
    int countProductsInOrder=0; 
    OutboundOrganization outOrg;
    ArrayList<Dock>dockMen;
    //ArrayList<Product>temporaryStorage;
    HashMap<Integer, ArrayList<Product>> orderidAndProductListForPick;
    HashMap<Integer, ArrayList<Product>> orderidAndProductListForPack;
    HashMap<Integer, ArrayList<Product>> orderidAndProductListForSentToDock;
    
    public PickAndPackAreaJPanel(PickAndPack pickAndPackMan) {
        initComponents();
        this.pickAndPackMan=pickAndPackMan;
        this.fc=pickAndPackMan.getFC();
        orderList=new ArrayList<Order>();
        //orderList=this.fc.getOrderListToSend();
        this.delivery =    this.fc.getDeliveryCompenyAssociatedToFC();//EcoSystem.getInstance().getDeliveryDirectory().getDeliveryById(1);//recieve.getFc().getDeliveryCompenyAssociatedToFC().  dList.get(0).getDeliveryByID();// getRestaurant();;
        //fc = EcoSystem.getInstance().getFcDirectory().getFCById(1);
        orderList=fc.getOrderListToSend();// getOrderList();
        dockMen=new ArrayList<Dock>();
        orderidAndProductListForPick = new HashMap<Integer,ArrayList<Product>>();
        orderidAndProductListForPack = new HashMap<Integer,ArrayList<Product>>();
        orderidAndProductListForSentToDock = new HashMap<Integer,ArrayList<Product>>();
        
        assignNewOrderEnteriesToHashMap();
        refreshOrderAndInventoryQuant();
        //HARDCODED
//        this.fc.getOutboundOrgDirectory().getOutboundOrganizationList();// InboundOrganizationDirectory;

        dockMen=this.pickAndPackMan.getOutboundOrg().getDockMenList();
        
        //OutboundOrganizationDirectory        ;
        this.dock=dockMen.get(0);//     EcoSystem.getInstance().getDockPeopleDirectory().getDockMenList().get(0);
    }

    
    private void assignNewOrderEnteriesToHashMap(){
        for(Order o1:orderList){
            orderidAndProductListForPick.put(o1.getId(), new ArrayList<Product>());
        }
        for(Order o2:orderList){
            orderidAndProductListForPack.put(o2.getId(), new ArrayList<Product>());
        }
        for(Order o3:orderList){
            orderidAndProductListForSentToDock.put(o3.getId(), new ArrayList<Product>());
        }
    }
    @SuppressWarnings("unchecked")
    private void refreshOrderAndInventoryQuant(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //jComboBox1.removeAllItems();
        model.setRowCount(0);
        for(Order order: orderList){
            for(int i=0; i<order.getProductListInOrder().size();i++){
//                if(order.getStatus()!=Order.Status.Packed || order.getStatus()!=Order.Status.SentToDock){
//                    order.setStatus(Order.Status.Picked);
//                }
                model.addRow(new Object[]{order.getOrderId(),order.getProductListInOrder().get(i).getProductId(),order.getProductListInOrder().get(i),1,this.fc.getQuantityOfProduct(order.getProductListInOrder().get(i)),order.getStatus()});
                //if(order.getStatus()==Order.Status.OrderSentToShipmentFromVendor)jComboBox1.addItem(order);
            }
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddButton2 = new javax.swing.JButton();
        AddButton3 = new javax.swing.JButton();
        AddButton4 = new javax.swing.JButton();

        setBackground(new java.awt.Color(139, 216, 189));
        setFocusCycleRoot(true);
        setPreferredSize(new java.awt.Dimension(1500, 1000));

        jLabel1.setBackground(new java.awt.Color(36, 54, 101));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Picker and Packer");
        jLabel1.setOpaque(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Product Id", "Product Name", "Quantity Required", "Quantity Present in Inventory", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        AddButton2.setBackground(new java.awt.Color(255, 87, 87));
        AddButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddButton2.setForeground(new java.awt.Color(255, 255, 255));
        AddButton2.setText("Pick");
        AddButton2.setBorder(null);
        AddButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButton2ActionPerformed(evt);
            }
        });

        AddButton3.setBackground(new java.awt.Color(255, 87, 87));
        AddButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddButton3.setForeground(new java.awt.Color(255, 255, 255));
        AddButton3.setText("Pack");
        AddButton3.setBorder(null);
        AddButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButton3ActionPerformed(evt);
            }
        });

        AddButton4.setBackground(new java.awt.Color(255, 87, 87));
        AddButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddButton4.setForeground(new java.awt.Color(255, 255, 255));
        AddButton4.setText("Sent To Dock");
        AddButton4.setBorder(null);
        AddButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(AddButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddButton4))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddButton2, AddButton3, AddButton4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AddButton3)
                        .addComponent(AddButton4)))
                .addContainerGap(640, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddButton2, AddButton3, AddButton4});

    }// </editor-fold>//GEN-END:initComponents

    private void AddButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButton2ActionPerformed
//set status to PICK
        List<VendorShipment> shipments = delivery.getVendorShipmentList(); 
        Product temp2=null;
        List<Product> arrivedProd=arrivedProducts;
        
        int column = 1;
        int column2 = 0;
        int column3=2;
        int row = jTable1.getSelectedRow();
        int orderId=(Integer)jTable1.getModel().getValueAt(row,column2);
        Order o=null;
        //orderList.get(orderId)
        for(Order opop:orderList){
            if(opop.getId()==orderId){
                o=opop;
            }
        }
        
        //for(Order o : orderList){
            for(Product p: o.getProductListInOrder()){
                
                int selectedId = (Integer)jTable1.getModel().getValueAt(row, column);
                Product prodd = (Product)jTable1.getModel().getValueAt(row, column3);
                
                if(!orderidAndProductListForPick.get(o.getId()).contains(prodd)){
                    orderidAndProductListForPick.get(o.getId()).add(prodd);
                    break;
                }                
                
           //     if(o.getId()==selectedId){
           //         o.setStatus(Order.Status.Picked);
           //         break;
           // }
            
        //}
    }
        if(orderidAndProductListForPick.get(o.getId()).size()==o.getProductListInOrder().size()){
                    o.setStatus(Order.Status.Picked);
                    //break;
                }
//        Stow st = new //(Vendor) jComboBox1.getSelectedItem();
//            v.addOrder(newOrder);
        //refreshOrders();
        refreshOrderAndInventoryQuant();

        // TODO add your handling code here:
        //ArrayList<Order> orders = (ArrayList<Order>) vendor.getOrders();
        //ship = new VendorShipment(orders,vendor.getAddress(), orders.get(0).getFc().getAddress(), orders.get(0).getTimePlaced(),orders.get(0).getTimePlaced());
        //ship.setFc(orders.get(0).getFc());
        //ship.setStatus(Shipment.Status.Pending);
        //Delivery del = EcoSystem.getInstance().getDeliveryDirectory().getDeliveryById(1);
        //del.addFMShipmentsToDelivery(ship);

        //
        //Order temp = (Order)jComboBox1.getSelectedItem();
        //if (temp==null)return;
        //        DeliveryMan deliveryMan = (DeliveryMan) DeliveryMenList.getSelectedItem();
        //        if (deliveryMan==null) return;
        //        temp.setDeliveryMan(deliveryMan);
        //        temp.setStatus(Order.Status.Assigned);
        //        refreshOrders();
        //        refreshDeliveryMen();
        //
    }//GEN-LAST:event_AddButton2ActionPerformed

    private void AddButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButton3ActionPerformed
//set status to PACK
        List<VendorShipment> shipments = delivery.getVendorShipmentList(); 
        Product temp2=null;
        List<Product> arrivedProd=arrivedProducts;
        
        
        // TODO add your handling code here:
        int column = 1;
        int column2 = 0;
        int column3=2;
        int row = jTable1.getSelectedRow();
        int orderId=(Integer)jTable1.getModel().getValueAt(row,column2);
        Order o=null;
        //orderList.get(orderId)
        for(Order opop:orderList){
            if(opop.getId()==orderId){
                o=opop;
            }
        }
        
        //nishikori start
        //for(Order o : orderList){
            for(Product p: o.getProductListInOrder()){
                
                int selectedId = (Integer)jTable1.getModel().getValueAt(row, column);
                Product prodd = (Product)jTable1.getModel().getValueAt(row, column3);
                
                if(!orderidAndProductListForPack.get(o.getId()).contains(prodd)){
                    orderidAndProductListForPack.get(o.getId()).add(prodd);
                    break;
                }                
                
           //     if(o.getId()==selectedId){
           //         o.setStatus(Order.Status.Picked);
           //         break;
           // }
            
        }
    //}
        if(orderidAndProductListForPack.get(o.getId()).size()==o.getProductListInOrder().size()){
                    o.setStatus(Order.Status.Packed);
                }
        
//        Stow st = new //(Vendor) jComboBox1.getSelectedItem();
//            v.addOrder(newOrder);
        //refreshOrders();
        refreshOrderAndInventoryQuant();
        //nishikori end
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_AddButton3ActionPerformed

    private void AddButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButton4ActionPerformed
        // TODO add your handling code here:
        List<VendorShipment> shipments = delivery.getVendorShipmentList(); 
        Product temp2=null;
        List<Product> arrivedProd=arrivedProducts;
        //int column = 0;
        //    int column2=1;
        //    int column3=2;
        //    int row = jTable1.getSelectedRow();
            
            
            
           //start
           int column = 1;
        int column2 = 0;
        int column3=2;
        int row = jTable1.getSelectedRow();
        int orderId=(Integer)jTable1.getModel().getValueAt(row,column2);
        Order o=null;
        //orderList.get(orderId)
        for(Order opop:orderList){
            if(opop.getId()==orderId){
                o=opop;
            }
        }
           //stop
            //nishikori start
            for(Product p: o.getProductListInOrder()){
                
                int selectedId = (Integer)jTable1.getModel().getValueAt(row, column);
                Product prodd = (Product)jTable1.getModel().getValueAt(row, column3);
                
                
                if(p.getProductId()==selectedId){                
                this.fc.removeProduct(prodd);
                countProductsInOrder+=1;
                // set getQuantityOfProduct(order.getProductListInOrder().get(i));
                
                //do quantity --
                //break;
                
            }else{
                    continue;
                }
                if(!orderidAndProductListForSentToDock.get(o.getId()).contains(prodd)){
                    orderidAndProductListForSentToDock.get(o.getId()).add(prodd);
                    
                    break;
                }                
                
           //     if(o.getId()==selectedId){
           //         o.setStatus(Order.Status.Picked);
           //         break;
           // }
            
        }
    //}
        if(orderidAndProductListForSentToDock.get(o.getId()).size()==o.getProductListInOrder().size()){
                    o.setStatus(Order.Status.SentToDock);
                }
            //nishikori stop
            
            
        //for(Order o : orderList){
//HashMap            
            
        
        //if(dock.getPackedOrderList().size()>0){
        //    dock.setIsAvailable(false);
       // }
        refreshOrderAndInventoryQuant();
    }//GEN-LAST:event_AddButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton2;
    private javax.swing.JButton AddButton3;
    private javax.swing.JButton AddButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
