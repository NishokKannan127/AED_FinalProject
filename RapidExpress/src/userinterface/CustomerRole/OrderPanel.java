/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Role.Customer;
import Business.EcoSystem;
import Business.EnterpriseFulfillmentCenter.FulfillmentCenter;
import Business.EnterpriseFulfillmentCenter.FulfillmentCenterDirectory;
import Business.EnterpriseVendor.Vendor;
import Business.ExtraFeatures.Mail.Mail;
import Business.POJO.Order;
import Business.POJO.Product;
import Business.POJO.Address;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import java.net.URI;
import java.net.URISyntaxException;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;






/**
 *
 * @author nisho
 */
public class OrderPanel extends javax.swing.JPanel {

    /**
     * Creates new form Order
     */
    //private EcoSystem system;
    private Customer customer;
    List<Product> items = new ArrayList();
    EcoSystem system;
    private float total = 0f;
    ArrayList<Order> orderList=new ArrayList<Order>();
    public OrderPanel(Customer customer) {
        initComponents();
        this.customer = customer;        
        refreshVendors();
        //refreshItems();
//        refreshAverageRatings();
    }
    
    
    
    private void refreshVendors(){
        List<Vendor> vendors = EcoSystem.getInstance().getVendorDirectory().geVendorList();// getRestaurantDirectory().getRestaurantList();
        jComboBox1.removeAllItems();
        for(Vendor r : vendors){
            jComboBox1.addItem(r);
        }     
    }
    
    private void refreshItems(){
        Vendor r = (Vendor) jComboBox1.getSelectedItem();
        //jComboBox2.removeAllItems();        
        jComboBox2.removeAllItems();
        for(Product i : r.getProductsOffered()){
            jComboBox2.addItem(i);
        }
//        ArrayList<Product> prodList=new ArrayList<Product>();
//        prodList=r.getProductsOffered();
//        for(int i=0; i<prodList.size();i++){
            
//            jComboBox2.addItem(prodList.get(i));
//        }     
    }
    
    private void refreshCart(){
        DefaultTableModel model = (DefaultTableModel) CartTable.getModel();
        model.setRowCount(0);
        for(int iter=0;iter<items.size();iter++){
            Product i = items.get(iter);
            model.addRow(new Object[]{i.getProductId(), i.getProductName(), i.getProductCost()});
        }
        total=0f;
        for(Product i : items){
           total+=i.getProductCost();
        }
        jLabel3.setText(""+total);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        DeleteButton = new javax.swing.JButton();
        ConfirmButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        AddButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CartTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(139, 216, 189));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1500, 1000));

        jComboBox1.setBackground(new java.awt.Color(0, 0, 153));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox1PropertyChange(evt);
            }
        });

        DeleteButton.setBackground(new java.awt.Color(255, 87, 87));
        DeleteButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButton.setText("Delete Selected Item");
        DeleteButton.setBorder(null);
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        ConfirmButton.setBackground(new java.awt.Color(255, 87, 87));
        ConfirmButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ConfirmButton.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmButton.setText("Confirm Order");
        ConfirmButton.setBorder(null);
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Items");

        jComboBox2.setBackground(new java.awt.Color(0, 0, 153));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Add Item");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        AddButton.setBackground(new java.awt.Color(255, 87, 87));
        AddButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddButton.setForeground(new java.awt.Color(255, 255, 255));
        AddButton.setText("Add Item");
        AddButton.setBorder(null);
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        CartTable.setBackground(new java.awt.Color(139, 216, 189));
        CartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CartTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(CartTable);
        CartTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Total : ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Comments");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(36, 54, 101));
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Order ");
        jLabel5.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox1, 0, 220, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addComponent(ConfirmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(385, 385, 385)
                        .addComponent(jLabel3)))
                .addContainerGap(849, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ConfirmButton, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(605, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddButton, ConfirmButton, DeleteButton, jComboBox1, jComboBox2, jSpinner1, jTextField1});

    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
       Product item = (Product) jComboBox2.getSelectedItem();
       int quantity = (Integer)jSpinner1.getValue();
       for(int i=0;i<quantity;i++){
           items.add(item);
       }
       refreshCart();
       
       
    }//GEN-LAST:event_AddButtonActionPerformed

    private void jComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1PropertyChange

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        refreshItems();
        items.removeAll(items);
        refreshCart();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        int column = 0;
        int row = CartTable.getSelectedRow();
        int selectedId = (Integer)CartTable.getModel().getValueAt(row, column);
        Product temp=null;
        for(Product i : items){
            if(i.getProductId()==selectedId){
                temp = i;
                break;
            }
        }
        items.remove(temp);
        refreshCart();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        
        //nishok start - WRITE THIS CODE TO MAKE ORDERS TO MULTIPLE VENDORS SIMULTANEOUSLY
//        ArrayList<Order> orderList=new ArrayList<Order>();
//        ArrayList<Vendor>vendorList=new ArrayList<Vendor>();
//        for(int j=0; j<items.size();j++){
//            if(!vendorList.contains(items.get(j).getVendor())){
//                vendorList.add(items.get(j).getVendor());
//           }
//        }
//        for(int i=0;i<items.size();i++){
//            for(int j=0;j<vendorList.size();j++){
//                if(items.get(i).getVendor()==vendorList.get(j)){
//                    Order newOrder = new Order(customer,items, items.get(i).getVendor());
//                    Date date = Calendar.getInstance().getTime();  
//                    DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
//                    String strDate = dateFormat.format(date);  
//                    newOrder.setOrderDateTime(strDate);
//                    newOrder.setTimePlaced(strDate);
//                    FulfillmentCenter fc = EcoSystem.getInstance().getFcDirectory().getFCById(1);
//                    newOrder.setFc(fc);
//                    customer.addOrder(newOrder);    
//                    orderList.add(newOrder);
//            
//                    vendorList.get(j).addOrder(newOrder);
//                    newOrder.setStatus(Order.Status.SentRequestToVendor);
//                    fc.addOrderToOrderList(newOrder);
//                }
//            }
//        }
        //nishok end
        
        
        
        
//uncomment start
            //Order newOrder = new Order(customer,items, items.get(0).getVendor());// getRestaurant());
//            orderList.add(new Order(customer,items, items.get(0).getVendor()));
                orderList.add(new Order(customer, new ArrayList<Product>(items),(new ArrayList<Product>(items)).get(0).getVendor()));
             //MimeMessage message =mailSender.createMimeMessage();
             
            //String s = customer.getFirstName()+" "+customer.getLastName()+"\n"+"Order details are as follows :- "+"\n"+"\n"+"\n";
            String s="<p style=\"color:#001f3f\">"+customer.getFirstName()+" "+customer.getLastName()+"</p>"+"<p style=\"color:#001f3f\">Order details are as follows :</p><p></p><p></p>";
            String htmlCode=
         "<table width='100%' border='10' style=\"background-color:#DDDDDD\" BORDERCOLORLIGHT='#AAAAAA'  BORDERCOLORDARK='#DDDDDD' align='center'>"
                + "<tr align='center'>"
                + "<td style=\"color:#001f3f\"><b>Product Name<b></td>"
                + "<td style=\"color:#001f3f\"><b>Product Cost<b></td>"
                + "<td style=\"color:#001f3f\"><b>Vendor Name<b></td>"
                + "<td style=\"color:#001f3f\"><b>Order Status<b></td>"    
                + "</tr>";

            for(Product item:items){                
                    htmlCode=htmlCode+"<tr align='center'>"+"<td>" + item.getProductName() + "</td>"
                                + "<td>" + item.getProductCost() + "</td>"
                                + "<td>" + item.getVendor().getVendorName()+"</td>"
                                +"<td>" +  orderList.get(orderList.size()-1).getStatus()+"</td>"
                            +"</tr>";

                }
            htmlCode+="</table>";
            String ending="<p></p><p></p><p style=\"color:#001f3f\"> Thank you for shopping with us! </p>";
            

        try {
            Mail.sendMail("nishok217@gmail.com",htmlCode,"Order Placed",s,ending);         
        } catch (MessagingException ex) {
            Logger.getLogger(OrderPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        //change these hardcoded values
            FulfillmentCenter fc =new FulfillmentCenter();//, address);//= EcoSystem.getInstance().getFcDirectory().getFCById(1);
            FulfillmentCenterDirectory fcDir = EcoSystem.getInstance().getFcDirectory();
            for(int i=0; i<fcDir.getFulfillmentCenterList().size();i++){
                if(fcDir.getFulfillmentCenterList().get(i).getEntAddress().getState()==customer.getAddress().getState()){
                    fc=fcDir.getFulfillmentCenterList().get(i);
                }
            }
            
            Date date = Calendar.getInstance().getTime();  
                DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
                String strDate = dateFormat.format(date);  
//            newOrder.setOrderDateTime(strDate);
            orderList.get(orderList.size()-1).setOrderDateTime(strDate);
//            newOrder.setTimePlaced(strDate);
            orderList.get(orderList.size()-1).setTimePlaced(strDate);
//            newOrder.setFc(fc);
            orderList.get(orderList.size()-1).setFc(fc);
                    
//            customer.addOrder(newOrder);        
            customer.addOrder(orderList.get(orderList.size()-1));
            Vendor v = (Vendor) jComboBox1.getSelectedItem();
//            v.addOrder(newOrder);
            v.addOrder(orderList.get(orderList.size()-1));
            //newOrder.setStatus(Order.Status.SentRequestToVendor);
            orderList.get(orderList.size()-1).setStatus(Order.Status.SentRequestToVendor);
            fc.addOrderToOrderList(orderList.get(orderList.size()-1));
//uncomment end        
            
            
            
            
            
            //send SMS
    

 
            
        //List<Vendor>vendors=system.getVendorDirectory().geVendorList();
        //for(Product p:newOrder.returnProductList()){
        //    p.getVendor().addCustomerProductOrder(p);
            
        //}
        //ONCE THE VENDOR ACCEPTS THE ORDER-SUBTRACT QUANTITES FROM ITS HASHMAP
        //r.addOrder(newOrder);
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        //REFRESH PRODUCTS
    //    items.removeAll(items);
    //    refreshItems();
        
        //refreshCart();
    }//GEN-LAST:event_jComboBox2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTable CartTable;
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JComboBox<Vendor> jComboBox1;
    private javax.swing.JComboBox<Product> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
